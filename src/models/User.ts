import { NativeModules } from 'react-native';
import Wallet from './Wallet';
import Account from './Account';
import Transaction from './Transaction';
import AccountFiatProperties from './AccountFiatProperties';
import tryCatchProxy from '../ZKErrorProxy';
import {
  UserJSON,
  CurrencyCode,
  Network,
  AccountType,
  AccountJSON,
  TransactionJSON,
  ModulrCustomerData,
} from '../types';

const { RNZumoKit } = NativeModules;

/**
 * User class provides methods for managing user wallet and accounts.
 * <p>
 * User instance can be obtained via {@link ZumoKit.getUser} methods.
 */
@tryCatchProxy
export default class User {
  /** Identifier. */
  id: string;

  /** Indicator if user has wallet. */
  hasWallet: boolean;

  /** @internal */
  constructor(json: UserJSON) {
    this.id = json.id;
    this.hasWallet = !!json.hasWallet;
  }

  /**
   * Create user wallet seeded by provided mnemonic and encrypted with user's password.
   * <p>
   * Mnemonic can be generated by {@link ZKUtility.generateMnemonic} utility mythod.
   * @param  mnemonic       mnemonic seed phrase
   * @param  password       user provided password
   */
  async createWallet(mnemonic: string, password: string) {
    await RNZumoKit.createWallet(mnemonic, password);
    this.hasWallet = true;
    return new Wallet();
  }

  /**
   * Unlock user wallet with user's password.
   * @param  password       user provided password
   */
  async unlockWallet(password: string) {
    await RNZumoKit.unlockWallet(password);
    return new Wallet();
  }

  /**
   * Reveal menmonic seed phrase used to seed user wallet.
   * @param  password       user provided password
   */
  async revealMnemonic(password: string): Promise<string> {
    return RNZumoKit.revealMnemonic(password);
  }

  /**
   * Check if mnemonic seed phrase corresponds to user's wallet.
   * This is useful for validating seed phrase before trying to recover wallet.
   * @param  mnemonic       mnemonic seed phrase
   */
  async isRecoveryMnemonic(mnemonic: string): Promise<boolean> {
    return RNZumoKit.isRecoveryMnemonic(mnemonic);
  }

  /**
   * Recover user wallet with mnemonic seed phrase corresponding to user's wallet.
   * This can be used if user forgets his password or wants to change his wallet password.
   * @param  mnemonic       mnemonic seed phrase corresponding to user's wallet
   * @param  password       user provided password
   */
  async recoverWallet(mnemonic: string, password: string): Promise<Wallet> {
    await RNZumoKit.recoverWallet(mnemonic, password);
    return new Wallet();
  }

  /**
   * Get account in specific currency, on specific network, with specific type.
   * @param  currencyCode   currency code, e.g. 'BTC', 'ETH' or 'GBP'
   * @param  network        network type, e.g. 'MAINNET', 'TESTNET' or 'RINKEBY'
   * @param  type           account type, e.g. 'STANDARD', 'COMPATIBILITY' or 'SEGWIT'
   */
  async getAccount(currencyCode: CurrencyCode, network: Network, type: AccountType) {
    const json = await RNZumoKit.getAccount(currencyCode, network, type);
    return new Account(json);
  }

  /**
   * Get all user accounts.
   */
  async getAccounts(): Promise<Array<Account>> {
    const array = await RNZumoKit.getAccounts();
    return array.map((json: AccountJSON) => new Account(json));
  }

  /**
   * Get all user transactions.
   */
  async getTransactions(): Promise<Array<Transaction>> {
    const array = await RNZumoKit.getTransactions();
    return array.map((json: TransactionJSON) => new Transaction(json));
  }

  /**
   * Get account transactions for specified account.
   * @param accountId {@link  Account Account} identifier
   */
  async getAccountTransactions(accountId: string): Promise<Array<Transaction>> {
    const array = await RNZumoKit.getAccountTransactions(accountId);
    return array.map((json: TransactionJSON) => new Transaction(json));
  }

  /**
   * Check if user is a Modulr customer on 'MAINNET' or 'TESTNET' network.
   * @param  network 'MAINNET' or 'TESTNET'
   */
  async isModulrCustomer(network: Network): Promise<boolean> {
    return RNZumoKit.isModulrCustomer(network);
  }

  /**
   * Make user Modulr customer on specified network by providing user's personal details.
   * @param  network        'MAINNET' or 'TESTNET'
   * @param  customerData    user's personal details.
   */
  async makeModulrCustomer(network: Network, customerData: ModulrCustomerData): Promise<void> {
    return RNZumoKit.makeModulrCustomer(network, customerData);
  }

  /**
   * Create fiat account on specified network and currency code. User must already be Modulr customer on specified network.
   * @param  network        'MAINNET' or 'TESTNET'
   * @param  currencyCode  country code in ISO 4217 format, e.g. 'GBP'
   */
  async createFiatAccount(network: Network, currencyCode: CurrencyCode) {
    const json = await RNZumoKit.createFiatAccount(network, currencyCode);
    return new Account(json);
  }

  /**
   * Get nominated account details for specified account if it exists.
   * Refer to
   * <a href="https://developers.zumo.money/docs/guides/send-transactions#bitcoin">Create Fiat Account</a>
   * for explanation about nominated account.
   * @param  accountId     {@link  Account Account} identifier
   */
  async getNominatedAccountFiatPoperties(accountId: string): Promise<AccountFiatProperties | null> {
    try {
      const json = await RNZumoKit.getNominatedAccountFiatPoperties(accountId);
      return new AccountFiatProperties(json);
    } catch (error) {
      return null;
    }
  }
}
