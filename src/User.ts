import { NativeModules, NativeEventEmitter } from 'react-native';
import Wallet from './Wallet';
import Account from './models/Account';
import AccountFiatProperties from './models/AccountFiatProperties';
import AccountDataSnapshot from './models/AccountDataSnapshot';
import tryCatchProxy from './errorProxy';
import {
  UserJSON,
  CurrencyCode,
  Network,
  AccountType,
  AccountDataSnapshotJSON,
  FiatCustomerData,
} from './types';

const { RNZumoKit } = NativeModules;

/**
 * User class provides methods for managing user wallet and accounts.
 * <p>
 * User instance can be obtained via {@link ZumoKit.signIn} method.
 * <p>
 * See <a href="https://developers.zumo.money/docs/guides/manage-user-wallet">Manage User Wallet</a>,
 * <a href="https://developers.zumo.money/docs/guides/create-fiat-account">Create Fiat Account</a> and
 * <a href="https://developers.zumo.money/docs/guides/view-user-data">View User Data</a>
 * guides for usage details.
 */
@tryCatchProxy
export default class User {
  // User dentifier
  private id: string;

  // Indicator if user has wallet
  private walletIndicator: boolean;

  // Listening to account data changes
  private listeningToChanges = false;

  // The emitter that bubbles events from the native side
  private emitter = new NativeEventEmitter(RNZumoKit);

  // Current user account data snanpshots
  private accountDataSnapshots: Array<AccountDataSnapshot> = [];

  // Listeners for account data changes
  private accountDataListeners: Array<(snapshots: Array<AccountDataSnapshot>) => void> = [];

  /** @internal */
  constructor(json: UserJSON) {
    this.id = json.id;
    this.walletIndicator = json.hasWallet;

    this.emitter.addListener('AccountDataChanged', (snapshots: Array<AccountDataSnapshotJSON>) => {
      this.listeningToChanges = true;
      this.accountDataSnapshots = snapshots.map(
        (snapshot: AccountDataSnapshotJSON) => new AccountDataSnapshot(snapshot)
      );
      this.accountDataListeners.forEach((listener) => listener(this.accountDataSnapshots));
    });
  }

  /** Get user dentifier. */
  getId(): string {
    return this.id;
  }

  /** Indicator if user has wallet. */
  hasWallet(): boolean {
    return this.walletIndicator;
  }

  /**
   * Create user wallet seeded by provided mnemonic and encrypted with user's password.
   * <p>
   * Mnemonic can be generated by {@link ZKUtility.generateMnemonic} utility method.
   * @param  mnemonic       mnemonic seed phrase
   * @param  password       user provided password
   */
  async createWallet(mnemonic: string, password: string) {
    await RNZumoKit.createWallet(mnemonic, password);
    this.walletIndicator = true;
    return new Wallet();
  }

  /**
   * Recover user wallet with mnemonic seed phrase corresponding to user's wallet.
   * This can be used if user forgets his password or wants to change his wallet password.
   * @param  mnemonic       mnemonic seed phrase corresponding to user's wallet
   * @param  password       user provided password
   */
  async recoverWallet(mnemonic: string, password: string): Promise<Wallet> {
    await RNZumoKit.recoverWallet(mnemonic, password);
    return new Wallet();
  }

  /**
   * Unlock user wallet with user's password.
   * @param  password       user provided password
   */
  async unlockWallet(password: string) {
    await RNZumoKit.unlockWallet(password);
    return new Wallet();
  }

  /**
   * Reveal menmonic seed phrase used to seed user wallet.
   * @param  password       user provided password
   */
  async revealMnemonic(password: string): Promise<string> {
    return RNZumoKit.revealMnemonic(password);
  }

  /**
   * Check if mnemonic seed phrase corresponds to user's wallet.
   * This is useful for validating seed phrase before trying to recover wallet.
   * @param  mnemonic       mnemonic seed phrase
   */
  async isRecoveryMnemonic(mnemonic: string): Promise<boolean> {
    return RNZumoKit.isRecoveryMnemonic(mnemonic);
  }

  /**
   * Get account in specific currency, on specific network, with specific type.
   * @param  currencyCode   currency code, e.g. 'BTC', 'ETH' or 'GBP'
   * @param  network        network type, e.g. 'MAINNET', 'TESTNET' or 'RINKEBY'
   * @param  type           account type, e.g. 'STANDARD', 'COMPATIBILITY' or 'SEGWIT'
   */
  async getAccount(currencyCode: CurrencyCode, network: Network, type: AccountType) {
    const json = await RNZumoKit.getAccount(currencyCode, network, type);
    return new Account(json);
  }

  /**
   * Get all user accounts.
   */
  async getAccounts(): Promise<Array<Account>> {
    const array = await RNZumoKit.getAccounts();
    return array.map((json: AccountJSON) => new Account(json));
  }

  /**
   * Check if user is a fiat customer on 'MAINNET' or 'TESTNET' network.
   * @param  network 'MAINNET' or 'TESTNET'
   */
  async isFiatCustomer(network: Network): Promise<boolean> {
    return RNZumoKit.isFiatCustomer(network);
  }

  /**
   * Make user fiat customer on specified network by providing user's personal details.
   * @param  network        'MAINNET' or 'TESTNET'
   * @param  customerData    user's personal details.
   */
  async makeFiatCustomer(network: Network, customerData: FiatCustomerData): Promise<void> {
    return RNZumoKit.makeFiatCustomer(network, customerData);
  }

  /**
   * Create fiat account on specified network and currency code. User must already be fiat customer on specified network.
   * @param  network        'MAINNET' or 'TESTNET'
   * @param  currencyCode  country code in ISO 4217 format, e.g. 'GBP'
   */
  async createFiatAccount(network: Network, currencyCode: CurrencyCode) {
    const json = await RNZumoKit.createFiatAccount(network, currencyCode);
    return new Account(json);
  }

  /**
   * Get nominated account details for specified account if it exists.
   * Refer to
   * <a href="https://developers.zumo.money/docs/guides/send-transactions#bitcoin">Create Fiat Account</a>
   * for explanation about nominated account.
   * @param  accountId     {@link  Account Account} identifier
   */
  async getNominatedAccountFiatPoperties(accountId: string): Promise<AccountFiatProperties | null> {
    try {
      const json = await RNZumoKit.getNominatedAccountFiatPoperties(accountId);
      return new AccountFiatProperties(json);
    } catch (error) {
      return null;
    }
  }

  /**
   * Listen to all account data changes.
   *
   * @param listener interface to listen to user changes
   */
  addAccountDataListener(listener: (snapshots: Array<AccountDataSnapshot>) => void) {
    this.accountDataListeners.push(listener);
    if (this.listeningToChanges) {
      listener(this.accountDataSnapshots);
    } else {
      RNZumoKit.addAccountDataListener();
    }
  }

  /**
   * Remove listener to state changes.
   *
   * @param listener interface to listen to state changes
   */
  removeAccountDataListener(listener: (snapshot: Array<AccountDataSnapshot>) => void) {
    let index = this.accountDataListeners.indexOf(listener);
    while (index !== -1) {
      this.accountDataListeners.splice(index, 1);
      index = this.accountDataListeners.indexOf(listener);
    }
  }
}
